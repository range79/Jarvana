{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = 'http://localhost:8080';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// JAR Management APIs\nexport const jarApi = {\n  // Upload JAR file\n  upload: async file => {\n    const formData = new FormData();\n    formData.append('file', file);\n    const response = await api.post('/jars/upload', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data;\n  },\n  // Download JAR file\n  download: async id => {\n    const response = await api.get(`/jars/download/${id}`, {\n      responseType: 'blob'\n    });\n    return response.data;\n  },\n  // Delete single JAR\n  deleteSingle: async id => {\n    await api.delete(`/jars/delete/${id}`);\n  },\n  // Delete all JARs\n  deleteAll: async () => {\n    await api.delete('/jars/delete/all');\n  }\n};\n\n// JAR Info APIs\nexport const jarInfoApi = {\n  // Get JAR by ID\n  getById: async id => {\n    const response = await api.get(`/info/${id}`);\n    return response.data;\n  },\n  // Get all JARs with pagination\n  getAll: async (params = {}) => {\n    const response = await api.get('/info/all', {\n      params\n    });\n    return response.data;\n  }\n};\n\n// Execution APIs\nexport const executionApi = {\n  // Get execution status\n  getExecution: async id => {\n    const response = await api.get(`/exec/${id}`);\n    return response.data;\n  },\n  // Stream execution\n  streamExecution: id => {\n    return new EventSource(`${API_BASE_URL}/exec/stream/${id}`);\n  },\n  // Stop execution\n  stopExecution: async id => {\n    const response = await api.delete(`/exec/stop/${id}`);\n    return response.data;\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","api","create","baseURL","headers","jarApi","upload","file","formData","FormData","append","response","post","data","download","id","get","responseType","deleteSingle","delete","deleteAll","jarInfoApi","getById","getAll","params","executionApi","getExecution","streamExecution","EventSource","stopExecution"],"sources":["/home/range/workdir/Jarvana/frontend/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\nimport { \n  JarMetadataDto, \n  PageJarMetadataDto, \n  ResponseDtoExecutionResponseDto,\n  PaginationParams \n} from '../types/api';\n\nconst API_BASE_URL = 'http://localhost:8080';\n\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// JAR Management APIs\nexport const jarApi = {\n  // Upload JAR file\n  upload: async (file: File): Promise<JarMetadataDto> => {\n    const formData = new FormData();\n    formData.append('file', file);\n    \n    const response = await api.post('/jars/upload', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data',\n      },\n    });\n    return response.data;\n  },\n\n  // Download JAR file\n  download: async (id: number): Promise<Blob> => {\n    const response = await api.get(`/jars/download/${id}`, {\n      responseType: 'blob',\n    });\n    return response.data;\n  },\n\n  // Delete single JAR\n  deleteSingle: async (id: number): Promise<void> => {\n    await api.delete(`/jars/delete/${id}`);\n  },\n\n  // Delete all JARs\n  deleteAll: async (): Promise<void> => {\n    await api.delete('/jars/delete/all');\n  },\n};\n\n// JAR Info APIs\nexport const jarInfoApi = {\n  // Get JAR by ID\n  getById: async (id: number): Promise<JarMetadataDto> => {\n    const response = await api.get(`/info/${id}`);\n    return response.data;\n  },\n\n  // Get all JARs with pagination\n  getAll: async (params: PaginationParams = {}): Promise<PageJarMetadataDto> => {\n    const response = await api.get('/info/all', { params });\n    return response.data;\n  },\n};\n\n// Execution APIs\nexport const executionApi = {\n  // Get execution status\n  getExecution: async (id: number): Promise<ResponseDtoExecutionResponseDto> => {\n    const response = await api.get(`/exec/${id}`);\n    return response.data;\n  },\n\n  // Stream execution\n  streamExecution: (id: number): EventSource => {\n    return new EventSource(`${API_BASE_URL}/exec/stream/${id}`);\n  },\n\n  // Stop execution\n  stopExecution: async (id: number): Promise<ResponseDtoExecutionResponseDto> => {\n    const response = await api.delete(`/exec/stop/${id}`);\n    return response.data;\n  },\n};\n\nexport default api;\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAQzB,MAAMC,YAAY,GAAG,uBAAuB;AAE5C,MAAMC,GAAG,GAAGF,KAAK,CAACG,MAAM,CAAC;EACvBC,OAAO,EAAEH,YAAY;EACrBI,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMC,MAAM,GAAG;EACpB;EACAC,MAAM,EAAE,MAAOC,IAAU,IAA8B;IACrD,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;IAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEH,IAAI,CAAC;IAE7B,MAAMI,QAAQ,GAAG,MAAMV,GAAG,CAACW,IAAI,CAAC,cAAc,EAAEJ,QAAQ,EAAE;MACxDJ,OAAO,EAAE;QACP,cAAc,EAAE;MAClB;IACF,CAAC,CAAC;IACF,OAAOO,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED;EACAC,QAAQ,EAAE,MAAOC,EAAU,IAAoB;IAC7C,MAAMJ,QAAQ,GAAG,MAAMV,GAAG,CAACe,GAAG,CAAC,kBAAkBD,EAAE,EAAE,EAAE;MACrDE,YAAY,EAAE;IAChB,CAAC,CAAC;IACF,OAAON,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED;EACAK,YAAY,EAAE,MAAOH,EAAU,IAAoB;IACjD,MAAMd,GAAG,CAACkB,MAAM,CAAC,gBAAgBJ,EAAE,EAAE,CAAC;EACxC,CAAC;EAED;EACAK,SAAS,EAAE,MAAAA,CAAA,KAA2B;IACpC,MAAMnB,GAAG,CAACkB,MAAM,CAAC,kBAAkB,CAAC;EACtC;AACF,CAAC;;AAED;AACA,OAAO,MAAME,UAAU,GAAG;EACxB;EACAC,OAAO,EAAE,MAAOP,EAAU,IAA8B;IACtD,MAAMJ,QAAQ,GAAG,MAAMV,GAAG,CAACe,GAAG,CAAC,SAASD,EAAE,EAAE,CAAC;IAC7C,OAAOJ,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED;EACAU,MAAM,EAAE,MAAAA,CAAOC,MAAwB,GAAG,CAAC,CAAC,KAAkC;IAC5E,MAAMb,QAAQ,GAAG,MAAMV,GAAG,CAACe,GAAG,CAAC,WAAW,EAAE;MAAEQ;IAAO,CAAC,CAAC;IACvD,OAAOb,QAAQ,CAACE,IAAI;EACtB;AACF,CAAC;;AAED;AACA,OAAO,MAAMY,YAAY,GAAG;EAC1B;EACAC,YAAY,EAAE,MAAOX,EAAU,IAA+C;IAC5E,MAAMJ,QAAQ,GAAG,MAAMV,GAAG,CAACe,GAAG,CAAC,SAASD,EAAE,EAAE,CAAC;IAC7C,OAAOJ,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED;EACAc,eAAe,EAAGZ,EAAU,IAAkB;IAC5C,OAAO,IAAIa,WAAW,CAAC,GAAG5B,YAAY,gBAAgBe,EAAE,EAAE,CAAC;EAC7D,CAAC;EAED;EACAc,aAAa,EAAE,MAAOd,EAAU,IAA+C;IAC7E,MAAMJ,QAAQ,GAAG,MAAMV,GAAG,CAACkB,MAAM,CAAC,cAAcJ,EAAE,EAAE,CAAC;IACrD,OAAOJ,QAAQ,CAACE,IAAI;EACtB;AACF,CAAC;AAED,eAAeZ,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}