{"ast":null,"code":"var _jsxFileName = \"/home/range/workdir/Jarvana/frontend/src/contexts/ConnectionContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport { jarInfoApi } from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ConnectionContext = /*#__PURE__*/createContext(undefined);\nexport const useConnection = () => {\n  _s();\n  const context = useContext(ConnectionContext);\n  if (context === undefined) {\n    throw new Error('useConnection must be used within a ConnectionProvider');\n  }\n  return context;\n};\n_s(useConnection, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const ConnectionProvider = ({\n  children\n}) => {\n  _s2();\n  const [isConnected, setIsConnected] = useState(true);\n  const [lastChecked, setLastChecked] = useState(null);\n  const checkConnection = async () => {\n    try {\n      // Try to fetch a small amount of data to test connection\n      await jarInfoApi.getAll({\n        size: 1,\n        page: 0\n      });\n      setIsConnected(true);\n      setLastChecked(new Date());\n    } catch (error) {\n      console.error('Backend connection failed:', error);\n      setIsConnected(false);\n      setLastChecked(new Date());\n    }\n  };\n  useEffect(() => {\n    // Check connection on mount\n    checkConnection();\n\n    // Check connection every 30 seconds\n    const interval = setInterval(checkConnection, 30000);\n    return () => clearInterval(interval);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(ConnectionContext.Provider, {\n    value: {\n      isConnected,\n      checkConnection,\n      lastChecked\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n};\n_s2(ConnectionProvider, \"09RZ5OKJmm1XNf+SfgWUNrupWOw=\");\n_c = ConnectionProvider;\nvar _c;\n$RefreshReg$(_c, \"ConnectionProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","jarInfoApi","jsxDEV","_jsxDEV","ConnectionContext","undefined","useConnection","_s","context","Error","ConnectionProvider","children","_s2","isConnected","setIsConnected","lastChecked","setLastChecked","checkConnection","getAll","size","page","Date","error","console","interval","setInterval","clearInterval","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/range/workdir/Jarvana/frontend/src/contexts/ConnectionContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState } from 'react';\nimport { jarInfoApi } from '../services/api';\n\ninterface ConnectionContextType {\n  isConnected: boolean;\n  checkConnection: () => Promise<void>;\n  lastChecked: Date | null;\n}\n\nconst ConnectionContext = createContext<ConnectionContextType | undefined>(undefined);\n\nexport const useConnection = () => {\n  const context = useContext(ConnectionContext);\n  if (context === undefined) {\n    throw new Error('useConnection must be used within a ConnectionProvider');\n  }\n  return context;\n};\n\ninterface ConnectionProviderProps {\n  children: React.ReactNode;\n}\n\nexport const ConnectionProvider: React.FC<ConnectionProviderProps> = ({ children }) => {\n  const [isConnected, setIsConnected] = useState<boolean>(true);\n  const [lastChecked, setLastChecked] = useState<Date | null>(null);\n\n  const checkConnection = async () => {\n    try {\n      // Try to fetch a small amount of data to test connection\n      await jarInfoApi.getAll({ size: 1, page: 0 });\n      setIsConnected(true);\n      setLastChecked(new Date());\n    } catch (error) {\n      console.error('Backend connection failed:', error);\n      setIsConnected(false);\n      setLastChecked(new Date());\n    }\n  };\n\n  useEffect(() => {\n    // Check connection on mount\n    checkConnection();\n\n    // Check connection every 30 seconds\n    const interval = setInterval(checkConnection, 30000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  return (\n    <ConnectionContext.Provider value={{ isConnected, checkConnection, lastChecked }}>\n      {children}\n    </ConnectionContext.Provider>\n  );\n};\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC7E,SAASC,UAAU,QAAQ,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAQ7C,MAAMC,iBAAiB,gBAAGP,aAAa,CAAoCQ,SAAS,CAAC;AAErF,OAAO,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjC,MAAMC,OAAO,GAAGV,UAAU,CAACM,iBAAiB,CAAC;EAC7C,IAAII,OAAO,KAAKH,SAAS,EAAE;IACzB,MAAM,IAAII,KAAK,CAAC,wDAAwD,CAAC;EAC3E;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,EAAA,CANWD,aAAa;AAY1B,OAAO,MAAMI,kBAAqD,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EACrF,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGd,QAAQ,CAAU,IAAI,CAAC;EAC7D,MAAM,CAACe,WAAW,EAAEC,cAAc,CAAC,GAAGhB,QAAQ,CAAc,IAAI,CAAC;EAEjE,MAAMiB,eAAe,GAAG,MAAAA,CAAA,KAAY;IAClC,IAAI;MACF;MACA,MAAMhB,UAAU,CAACiB,MAAM,CAAC;QAAEC,IAAI,EAAE,CAAC;QAAEC,IAAI,EAAE;MAAE,CAAC,CAAC;MAC7CN,cAAc,CAAC,IAAI,CAAC;MACpBE,cAAc,CAAC,IAAIK,IAAI,CAAC,CAAC,CAAC;IAC5B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MAClDR,cAAc,CAAC,KAAK,CAAC;MACrBE,cAAc,CAAC,IAAIK,IAAI,CAAC,CAAC,CAAC;IAC5B;EACF,CAAC;EAEDtB,SAAS,CAAC,MAAM;IACd;IACAkB,eAAe,CAAC,CAAC;;IAEjB;IACA,MAAMO,QAAQ,GAAGC,WAAW,CAACR,eAAe,EAAE,KAAK,CAAC;IAEpD,OAAO,MAAMS,aAAa,CAACF,QAAQ,CAAC;EACtC,CAAC,EAAE,EAAE,CAAC;EAEN,oBACErB,OAAA,CAACC,iBAAiB,CAACuB,QAAQ;IAACC,KAAK,EAAE;MAAEf,WAAW;MAAEI,eAAe;MAAEF;IAAY,CAAE;IAAAJ,QAAA,EAC9EA;EAAQ;IAAAkB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACiB,CAAC;AAEjC,CAAC;AAACpB,GAAA,CAhCWF,kBAAqD;AAAAuB,EAAA,GAArDvB,kBAAqD;AAAA,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}